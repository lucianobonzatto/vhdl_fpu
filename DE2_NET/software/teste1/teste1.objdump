
teste1.elf:     file format elf32-littlenios2
teste1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00000d7c memsz 0x00000e98 flags rwx
    LOAD off    0x00002000 vaddr 0x01400000 paddr 0x01400000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01400000  01400000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000ad0  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00800c84  00800c84  00001c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000100  00800c9c  00800c9c  00001c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00800d9c  00800d9c  00001d9c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000290  00000000  00000000  00002028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000003f1  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003d95  00000000  00000000  000026a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001143  00000000  00000000  0000643e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002eb9  00000000  00000000  00007581  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000038c  00000000  00000000  0000a43c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000078b  00000000  00000000  0000a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000005ea  00000000  00000000  0000af53  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0000b540  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000058  00000000  00000000  0000b560  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000c765  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0000c768  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c76d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c76e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000c76f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000c773  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000c777  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0000c77b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0000c786  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0000c791  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0000c79c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000013  00000000  00000000  0000c7a4  2**0
                  CONTENTS, READONLY
 29 .jdi          00004c3e  00000000  00000000  0000c7b7  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000aeb64  00000000  00000000  000113f5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01400000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00800c84 l    d  .rodata	00000000 .rodata
00800c9c l    d  .rwdata	00000000 .rwdata
00800d9c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00800c9c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0080051c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00800690 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00800428 g     F .text	00000044 alt_main
00800230 g     F .text	00000090 _puts_r
00800db8 g     O .bss	00000100 alt_irq
00000000  w      *UND*	00000000 __errno
01400000 g     F .entry	00000000 __reset
00800d9c g     O .bss	00000004 errno
00800da4 g     O .bss	00000004 alt_argv
00808d7c g       *ABS*	00000000 _gp
01a81800 g       *ABS*	00000000 __alt_mem_epcs_controller
008002c0 g     F .text	00000014 puts
00800d80 g     O .rwdata	00000004 _global_impure_ptr
00800eb8 g       *ABS*	00000000 __bss_end
008009c8 g     F .text	000000f8 alt_iic_isr_register
00800b58 g     F .text	0000010c alt_tick
00800980 g     F .text	00000048 alt_ic_irq_enabled
00800ac0 g     F .text	00000098 alt_alarm_stop
00800dac g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0080046c g     F .text	000000b0 write
00800d84 g     O .rwdata	00000004 jtag_uart_0
00800eb8 g       *ABS*	00000000 end
00800c84 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00800700 g     F .text	00000090 alt_avalon_timer_sc_init
008005ec g     F .text	000000a4 altera_avalon_jtag_uart_write
01400000 g       *ABS*	00000000 __alt_mem_cfi_flash_0
008001b4 g     F .text	00000048 _start
00800db0 g     O .bss	00000004 _alt_tick_rate
00800db4 g     O .bss	00000004 _alt_nticks
008005b0 g     F .text	0000003c alt_sys_init
00800eb8 g       *ABS*	00000000 __alt_stack_base
008002f4 g     F .text	000000bc __sfvwrite_small_dev
00800d9c g       *ABS*	00000000 __bss_start
008001fc g     F .text	00000034 main
00800da8 g     O .bss	00000004 alt_envp
00800d88 g     O .rwdata	00000004 uart_0
00800d8c g     O .rwdata	00000004 alt_errno
00800c84 g       *ABS*	00000000 __CTOR_END__
01a00000 g       *ABS*	00000000 __alt_mem_sram_0
0080057c g     F .text	00000034 alt_irq_init
008003b0 g     F .text	00000078 _write_r
00800d7c g     O .rwdata	00000004 _impure_ptr
00800da0 g     O .bss	00000004 alt_argc
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
008007f4 g     F .text	00000050 alt_ic_isr_register
00800d9c g       *ABS*	00000000 _edata
00800eb8 g       *ABS*	00000000 _end
008008e0 g     F .text	000000a0 alt_ic_irq_disable
00800c64 g     F .text	00000020 altera_nios2_qsys_irq_init
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
01400000 g       .entry	00000000 _exit
008002d4 g     F .text	00000020 strlen
00800d90 g     O .rwdata	00000004 alt_priority_mask
00800844 g     F .text	0000009c alt_ic_irq_enable
00800d94 g     O .rwdata	00000008 alt_alarm_list
00800790 g     F .text	00000064 _do_ctors



Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02034 	movhi	r3,128
  800134:	18c36e04 	addi	r3,r3,3512
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02034 	movhi	r3,128
  80014c:	18c36e04 	addi	r3,r3,3512
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bfff04 	addi	r2,r2,-4
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  8001d0:	d6a35f14 	ori	gp,gp,36220
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001d8:	10836714 	ori	r2,r2,3484

    movhi r3, %hi(__bss_end)
  8001dc:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001e0:	18c3ae14 	ori	r3,r3,3768

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f4:	08004280 	call	800428 <alt_main>

008001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001f8:	003fff06 	br	8001f8 <alt_after_alt_main>

008001fc <main>:
 */

#include <stdio.h>

int main()
{
  8001fc:	defffe04 	addi	sp,sp,-8
  800200:	dfc00115 	stw	ra,4(sp)
  800204:	df000015 	stw	fp,0(sp)
  800208:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
  80020c:	01002034 	movhi	r4,128
  800210:	21032104 	addi	r4,r4,3204
  800214:	08002c00 	call	8002c0 <puts>

  return 0;
  800218:	0005883a 	mov	r2,zero
}
  80021c:	e037883a 	mov	sp,fp
  800220:	dfc00117 	ldw	ra,4(sp)
  800224:	df000017 	ldw	fp,0(sp)
  800228:	dec00204 	addi	sp,sp,8
  80022c:	f800283a 	ret

00800230 <_puts_r>:
  800230:	defffd04 	addi	sp,sp,-12
  800234:	dc000015 	stw	r16,0(sp)
  800238:	2021883a 	mov	r16,r4
  80023c:	2809883a 	mov	r4,r5
  800240:	dfc00215 	stw	ra,8(sp)
  800244:	dc400115 	stw	r17,4(sp)
  800248:	2823883a 	mov	r17,r5
  80024c:	08002d40 	call	8002d4 <strlen>
  800250:	80c00217 	ldw	r3,8(r16)
  800254:	02002034 	movhi	r8,128
  800258:	4200bd04 	addi	r8,r8,756
  80025c:	880d883a 	mov	r6,r17
  800260:	100f883a 	mov	r7,r2
  800264:	8009883a 	mov	r4,r16
  800268:	180b883a 	mov	r5,r3
  80026c:	1a000115 	stw	r8,4(r3)
  800270:	403ee83a 	callr	r8
  800274:	047fffc4 	movi	r17,-1
  800278:	8009883a 	mov	r4,r16
  80027c:	01802034 	movhi	r6,128
  800280:	31832604 	addi	r6,r6,3224
  800284:	01c00044 	movi	r7,1
  800288:	1440071e 	bne	r2,r17,8002a8 <_puts_r+0x78>
  80028c:	00ffffc4 	movi	r3,-1
  800290:	1805883a 	mov	r2,r3
  800294:	dfc00217 	ldw	ra,8(sp)
  800298:	dc400117 	ldw	r17,4(sp)
  80029c:	dc000017 	ldw	r16,0(sp)
  8002a0:	dec00304 	addi	sp,sp,12
  8002a4:	f800283a 	ret
  8002a8:	81400217 	ldw	r5,8(r16)
  8002ac:	28c00117 	ldw	r3,4(r5)
  8002b0:	183ee83a 	callr	r3
  8002b4:	0007883a 	mov	r3,zero
  8002b8:	147ff51e 	bne	r2,r17,800290 <_puts_r+0x60>
  8002bc:	003ff306 	br	80028c <_puts_r+0x5c>

008002c0 <puts>:
  8002c0:	00802034 	movhi	r2,128
  8002c4:	10835f04 	addi	r2,r2,3452
  8002c8:	200b883a 	mov	r5,r4
  8002cc:	11000017 	ldw	r4,0(r2)
  8002d0:	08002301 	jmpi	800230 <_puts_r>

008002d4 <strlen>:
  8002d4:	20800007 	ldb	r2,0(r4)
  8002d8:	10000526 	beq	r2,zero,8002f0 <strlen+0x1c>
  8002dc:	2007883a 	mov	r3,r4
  8002e0:	18c00044 	addi	r3,r3,1
  8002e4:	18800007 	ldb	r2,0(r3)
  8002e8:	103ffd1e 	bne	r2,zero,8002e0 <strlen+0xc>
  8002ec:	1905c83a 	sub	r2,r3,r4
  8002f0:	f800283a 	ret

008002f4 <__sfvwrite_small_dev>:
  8002f4:	2880000b 	ldhu	r2,0(r5)
  8002f8:	defffa04 	addi	sp,sp,-24
  8002fc:	dcc00315 	stw	r19,12(sp)
  800300:	1080020c 	andi	r2,r2,8
  800304:	dc800215 	stw	r18,8(sp)
  800308:	dc400115 	stw	r17,4(sp)
  80030c:	dfc00515 	stw	ra,20(sp)
  800310:	dd000415 	stw	r20,16(sp)
  800314:	dc000015 	stw	r16,0(sp)
  800318:	2825883a 	mov	r18,r5
  80031c:	2027883a 	mov	r19,r4
  800320:	3023883a 	mov	r17,r6
  800324:	10002026 	beq	r2,zero,8003a8 <__sfvwrite_small_dev+0xb4>
  800328:	2940008f 	ldh	r5,2(r5)
  80032c:	28000f16 	blt	r5,zero,80036c <__sfvwrite_small_dev+0x78>
  800330:	01c01b0e 	bge	zero,r7,8003a0 <__sfvwrite_small_dev+0xac>
  800334:	3821883a 	mov	r16,r7
  800338:	05010004 	movi	r20,1024
  80033c:	00000206 	br	800348 <__sfvwrite_small_dev+0x54>
  800340:	0400170e 	bge	zero,r16,8003a0 <__sfvwrite_small_dev+0xac>
  800344:	9140008f 	ldh	r5,2(r18)
  800348:	880d883a 	mov	r6,r17
  80034c:	9809883a 	mov	r4,r19
  800350:	800f883a 	mov	r7,r16
  800354:	a400010e 	bge	r20,r16,80035c <__sfvwrite_small_dev+0x68>
  800358:	01c10004 	movi	r7,1024
  80035c:	08003b00 	call	8003b0 <_write_r>
  800360:	88a3883a 	add	r17,r17,r2
  800364:	80a1c83a 	sub	r16,r16,r2
  800368:	00bff516 	blt	zero,r2,800340 <__sfvwrite_small_dev+0x4c>
  80036c:	9080000b 	ldhu	r2,0(r18)
  800370:	00ffffc4 	movi	r3,-1
  800374:	10801014 	ori	r2,r2,64
  800378:	9080000d 	sth	r2,0(r18)
  80037c:	1805883a 	mov	r2,r3
  800380:	dfc00517 	ldw	ra,20(sp)
  800384:	dd000417 	ldw	r20,16(sp)
  800388:	dcc00317 	ldw	r19,12(sp)
  80038c:	dc800217 	ldw	r18,8(sp)
  800390:	dc400117 	ldw	r17,4(sp)
  800394:	dc000017 	ldw	r16,0(sp)
  800398:	dec00604 	addi	sp,sp,24
  80039c:	f800283a 	ret
  8003a0:	0007883a 	mov	r3,zero
  8003a4:	003ff506 	br	80037c <__sfvwrite_small_dev+0x88>
  8003a8:	00ffffc4 	movi	r3,-1
  8003ac:	003ff306 	br	80037c <__sfvwrite_small_dev+0x88>

008003b0 <_write_r>:
  8003b0:	defffd04 	addi	sp,sp,-12
  8003b4:	dc000015 	stw	r16,0(sp)
  8003b8:	04002034 	movhi	r16,128
  8003bc:	84036704 	addi	r16,r16,3484
  8003c0:	dc400115 	stw	r17,4(sp)
  8003c4:	80000015 	stw	zero,0(r16)
  8003c8:	2023883a 	mov	r17,r4
  8003cc:	2809883a 	mov	r4,r5
  8003d0:	300b883a 	mov	r5,r6
  8003d4:	380d883a 	mov	r6,r7
  8003d8:	dfc00215 	stw	ra,8(sp)
  8003dc:	080046c0 	call	80046c <write>
  8003e0:	1007883a 	mov	r3,r2
  8003e4:	00bfffc4 	movi	r2,-1
  8003e8:	18800626 	beq	r3,r2,800404 <_write_r+0x54>
  8003ec:	1805883a 	mov	r2,r3
  8003f0:	dfc00217 	ldw	ra,8(sp)
  8003f4:	dc400117 	ldw	r17,4(sp)
  8003f8:	dc000017 	ldw	r16,0(sp)
  8003fc:	dec00304 	addi	sp,sp,12
  800400:	f800283a 	ret
  800404:	80800017 	ldw	r2,0(r16)
  800408:	103ff826 	beq	r2,zero,8003ec <_write_r+0x3c>
  80040c:	88800015 	stw	r2,0(r17)
  800410:	1805883a 	mov	r2,r3
  800414:	dfc00217 	ldw	ra,8(sp)
  800418:	dc400117 	ldw	r17,4(sp)
  80041c:	dc000017 	ldw	r16,0(sp)
  800420:	dec00304 	addi	sp,sp,12
  800424:	f800283a 	ret

00800428 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800428:	defffe04 	addi	sp,sp,-8
  80042c:	dfc00115 	stw	ra,4(sp)
  800430:	df000015 	stw	fp,0(sp)
  800434:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800438:	0009883a 	mov	r4,zero
  80043c:	080057c0 	call	80057c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  800440:	08005b00 	call	8005b0 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  800444:	08007900 	call	800790 <_do_ctors>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  800448:	d1200917 	ldw	r4,-32732(gp)
  80044c:	d1600a17 	ldw	r5,-32728(gp)
  800450:	d1a00b17 	ldw	r6,-32724(gp)
  800454:	08001fc0 	call	8001fc <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  800458:	e037883a 	mov	sp,fp
  80045c:	dfc00117 	ldw	ra,4(sp)
  800460:	df000017 	ldw	fp,0(sp)
  800464:	dec00204 	addi	sp,sp,8
  800468:	f800283a 	ret

0080046c <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80046c:	defff904 	addi	sp,sp,-28
  800470:	dfc00615 	stw	ra,24(sp)
  800474:	df000515 	stw	fp,20(sp)
  800478:	df000504 	addi	fp,sp,20
  80047c:	e13ffb15 	stw	r4,-20(fp)
  800480:	e17ffc15 	stw	r5,-16(fp)
  800484:	e1bffd15 	stw	r6,-12(fp)
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
  800488:	e0bffb17 	ldw	r2,-20(fp)
  80048c:	e0bfff15 	stw	r2,-4(fp)
  800490:	e0ffff17 	ldw	r3,-4(fp)
  800494:	18800060 	cmpeqi	r2,r3,1
  800498:	1000041e 	bne	r2,zero,8004ac <write+0x40>
  80049c:	e0ffff17 	ldw	r3,-4(fp)
  8004a0:	188000a0 	cmpeqi	r2,r3,2
  8004a4:	1000091e 	bne	r2,zero,8004cc <write+0x60>
  8004a8:	00001006 	br	8004ec <write+0x80>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
  8004ac:	e17ffc17 	ldw	r5,-16(fp)
  8004b0:	e1bffd17 	ldw	r6,-12(fp)
  8004b4:	01002034 	movhi	r4,128
  8004b8:	21036104 	addi	r4,r4,3460
  8004bc:	000f883a 	mov	r7,zero
  8004c0:	08005ec0 	call	8005ec <altera_avalon_jtag_uart_write>
  8004c4:	e0bffe15 	stw	r2,-8(fp)
  8004c8:	00000e06 	br	800504 <write+0x98>
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
  8004cc:	e17ffc17 	ldw	r5,-16(fp)
  8004d0:	e1bffd17 	ldw	r6,-12(fp)
  8004d4:	01002034 	movhi	r4,128
  8004d8:	21036104 	addi	r4,r4,3460
  8004dc:	000f883a 	mov	r7,zero
  8004e0:	08005ec0 	call	8005ec <altera_avalon_jtag_uart_write>
  8004e4:	e0bffe15 	stw	r2,-8(fp)
  8004e8:	00000606 	br	800504 <write+0x98>
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  8004ec:	080051c0 	call	80051c <alt_get_errno>
  8004f0:	1007883a 	mov	r3,r2
  8004f4:	00801444 	movi	r2,81
  8004f8:	18800015 	stw	r2,0(r3)
        return -1;
  8004fc:	00bfffc4 	movi	r2,-1
  800500:	e0bffe15 	stw	r2,-8(fp)
  800504:	e0bffe17 	ldw	r2,-8(fp)
    }
}
  800508:	e037883a 	mov	sp,fp
  80050c:	dfc00117 	ldw	ra,4(sp)
  800510:	df000017 	ldw	fp,0(sp)
  800514:	dec00204 	addi	sp,sp,8
  800518:	f800283a 	ret

0080051c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80051c:	defffd04 	addi	sp,sp,-12
  800520:	dfc00215 	stw	ra,8(sp)
  800524:	df000115 	stw	fp,4(sp)
  800528:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80052c:	00802034 	movhi	r2,128
  800530:	10836304 	addi	r2,r2,3468
  800534:	10800017 	ldw	r2,0(r2)
  800538:	1005003a 	cmpeq	r2,r2,zero
  80053c:	1000061e 	bne	r2,zero,800558 <alt_get_errno+0x3c>
  800540:	00802034 	movhi	r2,128
  800544:	10836304 	addi	r2,r2,3468
  800548:	10800017 	ldw	r2,0(r2)
  80054c:	103ee83a 	callr	r2
  800550:	e0bfff15 	stw	r2,-4(fp)
  800554:	00000306 	br	800564 <alt_get_errno+0x48>
  800558:	00802034 	movhi	r2,128
  80055c:	10836704 	addi	r2,r2,3484
  800560:	e0bfff15 	stw	r2,-4(fp)
  800564:	e0bfff17 	ldw	r2,-4(fp)
}
  800568:	e037883a 	mov	sp,fp
  80056c:	dfc00117 	ldw	ra,4(sp)
  800570:	df000017 	ldw	fp,0(sp)
  800574:	dec00204 	addi	sp,sp,8
  800578:	f800283a 	ret

0080057c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80057c:	defffd04 	addi	sp,sp,-12
  800580:	dfc00215 	stw	ra,8(sp)
  800584:	df000115 	stw	fp,4(sp)
  800588:	df000104 	addi	fp,sp,4
  80058c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
  800590:	0800c640 	call	800c64 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  800594:	00800044 	movi	r2,1
  800598:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80059c:	e037883a 	mov	sp,fp
  8005a0:	dfc00117 	ldw	ra,4(sp)
  8005a4:	df000017 	ldw	fp,0(sp)
  8005a8:	dec00204 	addi	sp,sp,8
  8005ac:	f800283a 	ret

008005b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8005b0:	defffe04 	addi	sp,sp,-8
  8005b4:	dfc00115 	stw	ra,4(sp)
  8005b8:	df000015 	stw	fp,0(sp)
  8005bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8005c0:	01006a34 	movhi	r4,424
  8005c4:	21080804 	addi	r4,r4,8224
  8005c8:	000b883a 	mov	r5,zero
  8005cc:	018000c4 	movi	r6,3
  8005d0:	01c0fa04 	movi	r7,1000
  8005d4:	08007000 	call	800700 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_CONTROLLER, epcs_controller);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_LCD_16207_INIT ( LCD_16207_0, lcd_16207_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
}
  8005d8:	e037883a 	mov	sp,fp
  8005dc:	dfc00117 	ldw	ra,4(sp)
  8005e0:	df000017 	ldw	fp,0(sp)
  8005e4:	dec00204 	addi	sp,sp,8
  8005e8:	f800283a 	ret

008005ec <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8005ec:	defff904 	addi	sp,sp,-28
  8005f0:	df000615 	stw	fp,24(sp)
  8005f4:	df000604 	addi	fp,sp,24
  8005f8:	e13ffc15 	stw	r4,-16(fp)
  8005fc:	e17ffd15 	stw	r5,-12(fp)
  800600:	e1bffe15 	stw	r6,-8(fp)
  800604:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  800608:	e0bffc17 	ldw	r2,-16(fp)
  80060c:	10800017 	ldw	r2,0(r2)
  800610:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
  800614:	e0bffe17 	ldw	r2,-8(fp)
  800618:	1007883a 	mov	r3,r2
  80061c:	e0bffd17 	ldw	r2,-12(fp)
  800620:	10c5883a 	add	r2,r2,r3
  800624:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  800628:	00001106 	br	800670 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  80062c:	e0bffb17 	ldw	r2,-20(fp)
  800630:	10800104 	addi	r2,r2,4
  800634:	10800037 	ldwio	r2,0(r2)
  800638:	10bfffec 	andhi	r2,r2,65535
  80063c:	1005003a 	cmpeq	r2,r2,zero
  800640:	10000b1e 	bne	r2,zero,800670 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  800644:	e13ffb17 	ldw	r4,-20(fp)
  800648:	e0bffd17 	ldw	r2,-12(fp)
  80064c:	10800003 	ldbu	r2,0(r2)
  800650:	10c03fcc 	andi	r3,r2,255
  800654:	18c0201c 	xori	r3,r3,128
  800658:	18ffe004 	addi	r3,r3,-128
  80065c:	e0bffd17 	ldw	r2,-12(fp)
  800660:	10800044 	addi	r2,r2,1
  800664:	e0bffd15 	stw	r2,-12(fp)
  800668:	2005883a 	mov	r2,r4
  80066c:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  800670:	e0fffd17 	ldw	r3,-12(fp)
  800674:	e0bffa17 	ldw	r2,-24(fp)
  800678:	18bfec36 	bltu	r3,r2,80062c <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  80067c:	e0bffe17 	ldw	r2,-8(fp)
}
  800680:	e037883a 	mov	sp,fp
  800684:	df000017 	ldw	fp,0(sp)
  800688:	dec00104 	addi	sp,sp,4
  80068c:	f800283a 	ret

00800690 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  800690:	defffa04 	addi	sp,sp,-24
  800694:	dfc00515 	stw	ra,20(sp)
  800698:	df000415 	stw	fp,16(sp)
  80069c:	df000404 	addi	fp,sp,16
  8006a0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8006a4:	e0bfff17 	ldw	r2,-4(fp)
  8006a8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8006ac:	e0bfff17 	ldw	r2,-4(fp)
  8006b0:	10800104 	addi	r2,r2,4
  8006b4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8006b8:	0005303a 	rdctl	r2,status
  8006bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8006c0:	e0fffd17 	ldw	r3,-12(fp)
  8006c4:	00bfff84 	movi	r2,-2
  8006c8:	1884703a 	and	r2,r3,r2
  8006cc:	1001703a 	wrctl	status,r2
  
  return context;
  8006d0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8006d4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  8006d8:	0800b580 	call	800b58 <alt_tick>
  8006dc:	e0bffe17 	ldw	r2,-8(fp)
  8006e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8006e4:	e0bffc17 	ldw	r2,-16(fp)
  8006e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8006ec:	e037883a 	mov	sp,fp
  8006f0:	dfc00117 	ldw	ra,4(sp)
  8006f4:	df000017 	ldw	fp,0(sp)
  8006f8:	dec00204 	addi	sp,sp,8
  8006fc:	f800283a 	ret

00800700 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  800700:	defff804 	addi	sp,sp,-32
  800704:	dfc00715 	stw	ra,28(sp)
  800708:	df000615 	stw	fp,24(sp)
  80070c:	df000604 	addi	fp,sp,24
  800710:	e13ffc15 	stw	r4,-16(fp)
  800714:	e17ffd15 	stw	r5,-12(fp)
  800718:	e1bffe15 	stw	r6,-8(fp)
  80071c:	e1ffff15 	stw	r7,-4(fp)
  800720:	e0bfff17 	ldw	r2,-4(fp)
  800724:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  800728:	00802034 	movhi	r2,128
  80072c:	10836c04 	addi	r2,r2,3504
  800730:	10800017 	ldw	r2,0(r2)
  800734:	1004c03a 	cmpne	r2,r2,zero
  800738:	1000041e 	bne	r2,zero,80074c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  80073c:	00c02034 	movhi	r3,128
  800740:	18c36c04 	addi	r3,r3,3504
  800744:	e0bffb17 	ldw	r2,-20(fp)
  800748:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80074c:	e0bffc17 	ldw	r2,-16(fp)
  800750:	10800104 	addi	r2,r2,4
  800754:	1007883a 	mov	r3,r2
  800758:	008001c4 	movi	r2,7
  80075c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  800760:	d8000015 	stw	zero,0(sp)
  800764:	e13ffd17 	ldw	r4,-12(fp)
  800768:	e17ffe17 	ldw	r5,-8(fp)
  80076c:	01802034 	movhi	r6,128
  800770:	3181a404 	addi	r6,r6,1680
  800774:	e1fffc17 	ldw	r7,-16(fp)
  800778:	08007f40 	call	8007f4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80077c:	e037883a 	mov	sp,fp
  800780:	dfc00117 	ldw	ra,4(sp)
  800784:	df000017 	ldw	fp,0(sp)
  800788:	dec00204 	addi	sp,sp,8
  80078c:	f800283a 	ret

00800790 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  800790:	defffd04 	addi	sp,sp,-12
  800794:	dfc00215 	stw	ra,8(sp)
  800798:	df000115 	stw	fp,4(sp)
  80079c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8007a0:	00bfff04 	movi	r2,-4
  8007a4:	00c02034 	movhi	r3,128
  8007a8:	18c32104 	addi	r3,r3,3204
  8007ac:	1885883a 	add	r2,r3,r2
  8007b0:	e0bfff15 	stw	r2,-4(fp)
  8007b4:	00000606 	br	8007d0 <_do_ctors+0x40>
        (*ctor) (); 
  8007b8:	e0bfff17 	ldw	r2,-4(fp)
  8007bc:	10800017 	ldw	r2,0(r2)
  8007c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8007c4:	e0bfff17 	ldw	r2,-4(fp)
  8007c8:	10bfff04 	addi	r2,r2,-4
  8007cc:	e0bfff15 	stw	r2,-4(fp)
  8007d0:	e0ffff17 	ldw	r3,-4(fp)
  8007d4:	00802034 	movhi	r2,128
  8007d8:	10832104 	addi	r2,r2,3204
  8007dc:	18bff62e 	bgeu	r3,r2,8007b8 <_do_ctors+0x28>
        (*ctor) (); 
}
  8007e0:	e037883a 	mov	sp,fp
  8007e4:	dfc00117 	ldw	ra,4(sp)
  8007e8:	df000017 	ldw	fp,0(sp)
  8007ec:	dec00204 	addi	sp,sp,8
  8007f0:	f800283a 	ret

008007f4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8007f4:	defff904 	addi	sp,sp,-28
  8007f8:	dfc00615 	stw	ra,24(sp)
  8007fc:	df000515 	stw	fp,20(sp)
  800800:	df000504 	addi	fp,sp,20
  800804:	e13ffc15 	stw	r4,-16(fp)
  800808:	e17ffd15 	stw	r5,-12(fp)
  80080c:	e1bffe15 	stw	r6,-8(fp)
  800810:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  800814:	e0800217 	ldw	r2,8(fp)
  800818:	d8800015 	stw	r2,0(sp)
  80081c:	e13ffc17 	ldw	r4,-16(fp)
  800820:	e17ffd17 	ldw	r5,-12(fp)
  800824:	e1bffe17 	ldw	r6,-8(fp)
  800828:	e1ffff17 	ldw	r7,-4(fp)
  80082c:	08009c80 	call	8009c8 <alt_iic_isr_register>
}  
  800830:	e037883a 	mov	sp,fp
  800834:	dfc00117 	ldw	ra,4(sp)
  800838:	df000017 	ldw	fp,0(sp)
  80083c:	dec00204 	addi	sp,sp,8
  800840:	f800283a 	ret

00800844 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  800844:	defff904 	addi	sp,sp,-28
  800848:	df000615 	stw	fp,24(sp)
  80084c:	df000604 	addi	fp,sp,24
  800850:	e13ffe15 	stw	r4,-8(fp)
  800854:	e17fff15 	stw	r5,-4(fp)
  800858:	e0bfff17 	ldw	r2,-4(fp)
  80085c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800860:	0005303a 	rdctl	r2,status
  800864:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800868:	e0fffb17 	ldw	r3,-20(fp)
  80086c:	00bfff84 	movi	r2,-2
  800870:	1884703a 	and	r2,r3,r2
  800874:	1001703a 	wrctl	status,r2
  
  return context;
  800878:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80087c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  800880:	e0fffc17 	ldw	r3,-16(fp)
  800884:	00800044 	movi	r2,1
  800888:	10c4983a 	sll	r2,r2,r3
  80088c:	1007883a 	mov	r3,r2
  800890:	00802034 	movhi	r2,128
  800894:	10836b04 	addi	r2,r2,3500
  800898:	10800017 	ldw	r2,0(r2)
  80089c:	1886b03a 	or	r3,r3,r2
  8008a0:	00802034 	movhi	r2,128
  8008a4:	10836b04 	addi	r2,r2,3500
  8008a8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8008ac:	00802034 	movhi	r2,128
  8008b0:	10836b04 	addi	r2,r2,3500
  8008b4:	10800017 	ldw	r2,0(r2)
  8008b8:	100170fa 	wrctl	ienable,r2
  8008bc:	e0bffd17 	ldw	r2,-12(fp)
  8008c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8008c4:	e0bffa17 	ldw	r2,-24(fp)
  8008c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8008cc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  8008d0:	e037883a 	mov	sp,fp
  8008d4:	df000017 	ldw	fp,0(sp)
  8008d8:	dec00104 	addi	sp,sp,4
  8008dc:	f800283a 	ret

008008e0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8008e0:	defff904 	addi	sp,sp,-28
  8008e4:	df000615 	stw	fp,24(sp)
  8008e8:	df000604 	addi	fp,sp,24
  8008ec:	e13ffe15 	stw	r4,-8(fp)
  8008f0:	e17fff15 	stw	r5,-4(fp)
  8008f4:	e0bfff17 	ldw	r2,-4(fp)
  8008f8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8008fc:	0005303a 	rdctl	r2,status
  800900:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800904:	e0fffb17 	ldw	r3,-20(fp)
  800908:	00bfff84 	movi	r2,-2
  80090c:	1884703a 	and	r2,r3,r2
  800910:	1001703a 	wrctl	status,r2
  
  return context;
  800914:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  800918:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80091c:	e0fffc17 	ldw	r3,-16(fp)
  800920:	00800044 	movi	r2,1
  800924:	10c4983a 	sll	r2,r2,r3
  800928:	0084303a 	nor	r2,zero,r2
  80092c:	1007883a 	mov	r3,r2
  800930:	00802034 	movhi	r2,128
  800934:	10836b04 	addi	r2,r2,3500
  800938:	10800017 	ldw	r2,0(r2)
  80093c:	1886703a 	and	r3,r3,r2
  800940:	00802034 	movhi	r2,128
  800944:	10836b04 	addi	r2,r2,3500
  800948:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80094c:	00802034 	movhi	r2,128
  800950:	10836b04 	addi	r2,r2,3500
  800954:	10800017 	ldw	r2,0(r2)
  800958:	100170fa 	wrctl	ienable,r2
  80095c:	e0bffd17 	ldw	r2,-12(fp)
  800960:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800964:	e0bffa17 	ldw	r2,-24(fp)
  800968:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80096c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  800970:	e037883a 	mov	sp,fp
  800974:	df000017 	ldw	fp,0(sp)
  800978:	dec00104 	addi	sp,sp,4
  80097c:	f800283a 	ret

00800980 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  800980:	defffc04 	addi	sp,sp,-16
  800984:	df000315 	stw	fp,12(sp)
  800988:	df000304 	addi	fp,sp,12
  80098c:	e13ffe15 	stw	r4,-8(fp)
  800990:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  800994:	000530fa 	rdctl	r2,ienable
  800998:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80099c:	e0ffff17 	ldw	r3,-4(fp)
  8009a0:	00800044 	movi	r2,1
  8009a4:	10c4983a 	sll	r2,r2,r3
  8009a8:	1007883a 	mov	r3,r2
  8009ac:	e0bffd17 	ldw	r2,-12(fp)
  8009b0:	1884703a 	and	r2,r3,r2
  8009b4:	1004c03a 	cmpne	r2,r2,zero
}
  8009b8:	e037883a 	mov	sp,fp
  8009bc:	df000017 	ldw	fp,0(sp)
  8009c0:	dec00104 	addi	sp,sp,4
  8009c4:	f800283a 	ret

008009c8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8009c8:	defff404 	addi	sp,sp,-48
  8009cc:	dfc00b15 	stw	ra,44(sp)
  8009d0:	df000a15 	stw	fp,40(sp)
  8009d4:	df000a04 	addi	fp,sp,40
  8009d8:	e13ffb15 	stw	r4,-20(fp)
  8009dc:	e17ffc15 	stw	r5,-16(fp)
  8009e0:	e1bffd15 	stw	r6,-12(fp)
  8009e4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  8009e8:	00bffa84 	movi	r2,-22
  8009ec:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8009f0:	e0bffc17 	ldw	r2,-16(fp)
  8009f4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8009f8:	e0bff917 	ldw	r2,-28(fp)
  8009fc:	10800808 	cmpgei	r2,r2,32
  800a00:	1000291e 	bne	r2,zero,800aa8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800a04:	0005303a 	rdctl	r2,status
  800a08:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800a0c:	e0fff717 	ldw	r3,-36(fp)
  800a10:	00bfff84 	movi	r2,-2
  800a14:	1884703a 	and	r2,r3,r2
  800a18:	1001703a 	wrctl	status,r2
  
  return context;
  800a1c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  800a20:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  800a24:	e0bff917 	ldw	r2,-28(fp)
  800a28:	00c02034 	movhi	r3,128
  800a2c:	18c36e04 	addi	r3,r3,3512
  800a30:	100490fa 	slli	r2,r2,3
  800a34:	10c7883a 	add	r3,r2,r3
  800a38:	e0bffd17 	ldw	r2,-12(fp)
  800a3c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  800a40:	e0bff917 	ldw	r2,-28(fp)
  800a44:	00c02034 	movhi	r3,128
  800a48:	18c36e04 	addi	r3,r3,3512
  800a4c:	100490fa 	slli	r2,r2,3
  800a50:	10c5883a 	add	r2,r2,r3
  800a54:	10c00104 	addi	r3,r2,4
  800a58:	e0bffe17 	ldw	r2,-8(fp)
  800a5c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  800a60:	e0bffd17 	ldw	r2,-12(fp)
  800a64:	1005003a 	cmpeq	r2,r2,zero
  800a68:	1000051e 	bne	r2,zero,800a80 <alt_iic_isr_register+0xb8>
  800a6c:	e17ff917 	ldw	r5,-28(fp)
  800a70:	e13ffb17 	ldw	r4,-20(fp)
  800a74:	08008440 	call	800844 <alt_ic_irq_enable>
  800a78:	e0bfff15 	stw	r2,-4(fp)
  800a7c:	00000406 	br	800a90 <alt_iic_isr_register+0xc8>
  800a80:	e17ff917 	ldw	r5,-28(fp)
  800a84:	e13ffb17 	ldw	r4,-20(fp)
  800a88:	08008e00 	call	8008e0 <alt_ic_irq_disable>
  800a8c:	e0bfff15 	stw	r2,-4(fp)
  800a90:	e0bfff17 	ldw	r2,-4(fp)
  800a94:	e0bffa15 	stw	r2,-24(fp)
  800a98:	e0bff817 	ldw	r2,-32(fp)
  800a9c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800aa0:	e0bff617 	ldw	r2,-40(fp)
  800aa4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  800aa8:	e0bffa17 	ldw	r2,-24(fp)
}
  800aac:	e037883a 	mov	sp,fp
  800ab0:	dfc00117 	ldw	ra,4(sp)
  800ab4:	df000017 	ldw	fp,0(sp)
  800ab8:	dec00204 	addi	sp,sp,8
  800abc:	f800283a 	ret

00800ac0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  800ac0:	defffa04 	addi	sp,sp,-24
  800ac4:	df000515 	stw	fp,20(sp)
  800ac8:	df000504 	addi	fp,sp,20
  800acc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800ad0:	0005303a 	rdctl	r2,status
  800ad4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800ad8:	e0fffd17 	ldw	r3,-12(fp)
  800adc:	00bfff84 	movi	r2,-2
  800ae0:	1884703a 	and	r2,r3,r2
  800ae4:	1001703a 	wrctl	status,r2
  
  return context;
  800ae8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  800aec:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  800af0:	e0bfff17 	ldw	r2,-4(fp)
  800af4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  800af8:	e0bffc17 	ldw	r2,-16(fp)
  800afc:	10c00017 	ldw	r3,0(r2)
  800b00:	e0bffc17 	ldw	r2,-16(fp)
  800b04:	10800117 	ldw	r2,4(r2)
  800b08:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  800b0c:	e0bffc17 	ldw	r2,-16(fp)
  800b10:	10c00117 	ldw	r3,4(r2)
  800b14:	e0bffc17 	ldw	r2,-16(fp)
  800b18:	10800017 	ldw	r2,0(r2)
  800b1c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  800b20:	e0fffc17 	ldw	r3,-16(fp)
  800b24:	e0bffc17 	ldw	r2,-16(fp)
  800b28:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  800b2c:	e0fffc17 	ldw	r3,-16(fp)
  800b30:	e0bffc17 	ldw	r2,-16(fp)
  800b34:	18800015 	stw	r2,0(r3)
  800b38:	e0bffe17 	ldw	r2,-8(fp)
  800b3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800b40:	e0bffb17 	ldw	r2,-20(fp)
  800b44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  800b48:	e037883a 	mov	sp,fp
  800b4c:	df000017 	ldw	fp,0(sp)
  800b50:	dec00104 	addi	sp,sp,4
  800b54:	f800283a 	ret

00800b58 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  800b58:	defffb04 	addi	sp,sp,-20
  800b5c:	dfc00415 	stw	ra,16(sp)
  800b60:	df000315 	stw	fp,12(sp)
  800b64:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  800b68:	d0a00617 	ldw	r2,-32744(gp)
  800b6c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  800b70:	d0a00e17 	ldw	r2,-32712(gp)
  800b74:	10800044 	addi	r2,r2,1
  800b78:	d0a00e15 	stw	r2,-32712(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  800b7c:	00003106 	br	800c44 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  800b80:	e0bffe17 	ldw	r2,-8(fp)
  800b84:	10800017 	ldw	r2,0(r2)
  800b88:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  800b8c:	e0bffe17 	ldw	r2,-8(fp)
  800b90:	10800403 	ldbu	r2,16(r2)
  800b94:	10803fcc 	andi	r2,r2,255
  800b98:	1005003a 	cmpeq	r2,r2,zero
  800b9c:	1000051e 	bne	r2,zero,800bb4 <alt_tick+0x5c>
  800ba0:	d0a00e17 	ldw	r2,-32712(gp)
  800ba4:	1004c03a 	cmpne	r2,r2,zero
  800ba8:	1000021e 	bne	r2,zero,800bb4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  800bac:	e0bffe17 	ldw	r2,-8(fp)
  800bb0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  800bb4:	e0bffe17 	ldw	r2,-8(fp)
  800bb8:	10c00217 	ldw	r3,8(r2)
  800bbc:	d0a00e17 	ldw	r2,-32712(gp)
  800bc0:	10c01e36 	bltu	r2,r3,800c3c <alt_tick+0xe4>
  800bc4:	e0bffe17 	ldw	r2,-8(fp)
  800bc8:	10800403 	ldbu	r2,16(r2)
  800bcc:	10803fcc 	andi	r2,r2,255
  800bd0:	1004c03a 	cmpne	r2,r2,zero
  800bd4:	1000191e 	bne	r2,zero,800c3c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  800bd8:	e0bffe17 	ldw	r2,-8(fp)
  800bdc:	10c00317 	ldw	r3,12(r2)
  800be0:	e0bffe17 	ldw	r2,-8(fp)
  800be4:	11000517 	ldw	r4,20(r2)
  800be8:	183ee83a 	callr	r3
  800bec:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  800bf0:	e0bffd17 	ldw	r2,-12(fp)
  800bf4:	1004c03a 	cmpne	r2,r2,zero
  800bf8:	1000031e 	bne	r2,zero,800c08 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  800bfc:	e13ffe17 	ldw	r4,-8(fp)
  800c00:	0800ac00 	call	800ac0 <alt_alarm_stop>
  800c04:	00000d06 	br	800c3c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  800c08:	e0bffe17 	ldw	r2,-8(fp)
  800c0c:	10c00217 	ldw	r3,8(r2)
  800c10:	e0bffd17 	ldw	r2,-12(fp)
  800c14:	1887883a 	add	r3,r3,r2
  800c18:	e0bffe17 	ldw	r2,-8(fp)
  800c1c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  800c20:	e0bffe17 	ldw	r2,-8(fp)
  800c24:	10c00217 	ldw	r3,8(r2)
  800c28:	d0a00e17 	ldw	r2,-32712(gp)
  800c2c:	1880032e 	bgeu	r3,r2,800c3c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  800c30:	e0fffe17 	ldw	r3,-8(fp)
  800c34:	00800044 	movi	r2,1
  800c38:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  800c3c:	e0bfff17 	ldw	r2,-4(fp)
  800c40:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  800c44:	d0e00604 	addi	r3,gp,-32744
  800c48:	e0bffe17 	ldw	r2,-8(fp)
  800c4c:	10ffcc1e 	bne	r2,r3,800b80 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  800c50:	e037883a 	mov	sp,fp
  800c54:	dfc00117 	ldw	ra,4(sp)
  800c58:	df000017 	ldw	fp,0(sp)
  800c5c:	dec00204 	addi	sp,sp,8
  800c60:	f800283a 	ret

00800c64 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  800c64:	deffff04 	addi	sp,sp,-4
  800c68:	df000015 	stw	fp,0(sp)
  800c6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  800c70:	000170fa 	wrctl	ienable,zero
}
  800c74:	e037883a 	mov	sp,fp
  800c78:	df000017 	ldw	fp,0(sp)
  800c7c:	dec00104 	addi	sp,sp,4
  800c80:	f800283a 	ret
