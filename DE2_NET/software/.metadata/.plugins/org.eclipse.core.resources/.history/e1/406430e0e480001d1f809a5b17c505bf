/******************************************************************************
* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *
* All rights reserved. All use of this software and documentation is          *
* subject to the License Agreement located at the end of this file below.     *
*******************************************************************************                                                                             *
* Date - October 24, 2006                                                     *
* Module - iniche_init.c                                                      *
*                                                                             *                                                                             *
******************************************************************************/

/******************************************************************************
 * NicheStack TCP/IP stack initialization and Operating System Start in main()
 * for Simple Socket Server (SSS) example. 
 * 
 * This example demonstrates the use of MicroC/OS-II running on NIOS II.       
 * In addition it is to serve as a good starting point for designs using       
 * MicroC/OS-II and Altera NicheStack TCP/IP Stack - NIOS II Edition.                                                                                           
 *      
 * Please refer to the Altera NicheStack Tutorial documentation for details on 
 * this software example, as well as details on how to configure the NicheStack
 * TCP/IP networking stack and MicroC/OS-II Real-Time Operating System.  
 */
  
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <stdint.h>
#include <io.h>
#include <fcntl.h>
/* MicroC/OS-II definitions */
#include "../server1_bsp/HAL/inc/includes.h"

#include "system.h"

#include "dm9000a.h"

/* Simple Socket Server definitions */
#include "simple_socket_server.h"
#include "alt_error_handler.h"

/* Nichestack definitions */
#include "../server1_bsp/iniche/src/h/nios2/ipport.h"
#include "../server1_bsp/iniche/src/h/tcpport.h"
#include "../server1_bsp/iniche/src/h/libport.h"
#include "../server1_bsp/iniche/src/nios2/osport.h"
#include "basic_io.h"
#include "LCD.h"
#include "altera_avalon_pio_regs.h"
/* Definition of task stack for the initial task which will initialize the NicheStack
 * TCP/IP Stack and then initialize the rest of the Simple Socket Server example tasks. 
 */
OS_STK    SSSInitialTaskStk[TASK_STACKSIZE];

/* Declarations for creating a task with TK_NEWTASK.  
 * All tasks which use NicheStack (those that use sockets) must be created this way.
 * TK_OBJECT macro creates the static task object used by NicheStack during operation.
 * TK_ENTRY macro corresponds to the entry point, or defined function name, of the task.
 * inet_taskinfo is the structure used by TK_NEWTASK to create the task.
 */
TK_OBJECT(to_ssstask);
TK_ENTRY(SSSSimpleSocketServerTask);

struct inet_taskinfo ssstask = {
      &to_ssstask,
      "simple socket server",
      SSSSimpleSocketServerTask,
      4,
      APP_STACK_SIZE,
};

#define FLOAT_SIZE sizeof(float)

union ufloat {
	float f;
	uint32_t b;
};

void print_float(float f) {
	union ufloat uf;
	uf.f = f;
	int i = 0;
	int j = 0;
	for(i = 0; i < 32; i++) {
		if((uf.b & 1<<i) == 1<<i) {
			printf("1");
		} else {
			printf("0");
		}
	}
}

/* SSSInitialTask will initialize the NicheStack
 * TCP/IP Stack and then initialize the rest of the Simple Socket Server example 
 * RTOS structures and tasks. 
 */
void SSSInitialTask(void *task_data)
{
  INT8U error_code;
  
  /*
   * Initialize Altera NicheStack TCP/IP Stack - Nios II Edition specific code.
   * NicheStack is initialized from a task, so that RTOS will have started, and 
   * I/O drivers are available.  Two tasks are created:
   *    "Inet main"  task with priority 2
   *    "clock tick" task with priority 3
   */   
  alt_iniche_init();
  netmain(); 

  /* Wait for the network stack to be ready before proceeding. 
   * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
   */
  while (!iniche_net_ready)
    TK_SLEEP(1);

  /* Now that the stack is running, perform the application initialization steps */
  
  /* Application Specific Task Launching Code Block Begin */

  printf("\nSimple Socket Server starting up\n");

  /* Create the main simple socket server task. */
  //TK_NEWTASK(&ssstask);
  
  /*create os data structures */
  //SSSCreateOSDataStructs();

  /* create the other tasks */
  //SSSCreateTasks();

  /* Application Specific Task Launching Code Block End */
  
  /*This task is deleted because there is no need for it to run again */
  //error_code = OSTaskDel(OS_PRIO_SELF);
  //alt_uCOSIIErrorHandler(error_code, 0);
  LCD_Init();
  int sw, but;
  struct sockaddr_in sa;
  int res;
  int SocketFD;
  char buf[1024];
  printf("estou aqui\n");
  SocketFD = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
  printf("Socket criado\n");
  memset(&sa, 0, sizeof sa);
  sa.sin_family = AF_INET;
  sa.sin_port = htons(7777); // ALTERAR PORTA A SER UTILIZADA AQUI
  res = inet_pton(AF_INET, "192.168.2.106", &sa.sin_addr); //ALTERAR O IP DO SERVIDOR AQUI
  if (connect(SocketFD, (struct sockaddr *)&sa, sizeof sa) == -1) {
	perror("connect failed");
	close(SocketFD);
	exit(EXIT_FAILURE);
  }
  while (1){

	  //read
	  int val1_res = IORD(WEB_FPU_0_BASE,0x0008);
	  printf("val1_res -> %d\n", val1_res);
	  int val2_res = IORD(WEB_FPU_0_BASE,0x0009);
	  printf("val2_res -> %d\n", val2_res);
	  int oper_res = IORD(WEB_FPU_0_BASE,0x000a);
	  printf("oper_res -> %d\n", oper_res);
	  int buf_size = recv(SocketFD, buf, sizeof(buf), 0);
	    if (buf_size < 0) //exemplo de recebimento
	    {
	        perror("Recv()");
	        exit(EXIT_FAILURE);
	    }else{
	    	buf[buf_size] = '\0';
	    	printf("Msg recebida (len %d): %s\n", buf_size, buf);
	    }

	    LCD_Show_Text(buf);
	    int first_space = -1;
	    int second_space = -1;
	    int last_index = -1;
	    int i = 0;
	    char float1[1024] = "\0";
	    char float2[1024] = "\0";
	    int float1_idx = 0;
	    int float2_idx = 0;
	    for(i = 0; i < buf_size; i++) {
	    	if(buf[i] == ' ') {
	    		if(first_space == -1) {
	    			first_space = i;
	    		} else if(second_space == -1) {
	    			second_space = i;
	    		}
	    	} else if(buf[i] == '\0') {
	    		last_index = i;
	    		break;
	    	} else {
	    		if(first_space == -1) {
	    			float1[float1_idx++] = buf[i];
	    		} else if(second_space != -1) {
	    			float2[float2_idx++] = buf[i];
	    		}
	    	}
	    }
	    float1[float1_idx] = '\0';
	    float2[float2_idx] = '\0';

	    int operation = 0;
	    int valida = first_space != -1 && second_space != -1;
	    valida &= second_space-first_space == 2;
	    valida &= float1_idx > 0 && float2_idx > 0;
	    if(valida) {
		    char op_char = buf[first_space+1];
		    switch(op_char) {
		    case '+':
		    	operation = 0;
		    	break;
		    case '-':
		    	operation = 1;
		    	break;
		    case '*':
		    	operation = 2;
		    	break;
		    case '/':
		    	operation = 3;
		    	break;
		    default:
		    	break;
		    }
		    float val1 = atof(float1);
		    float val2 = atof(float2);
		    printf("COMANDO VALIDO: %f %d %f\n", val1, operation, val2);
		    printf("Escrevendo dados na FPU...\n");

		  printf("VALOR 1: %f -> ", val1);
		  print_float(val1);
		  printf("\nVALOR 2: %f -> ", val2);
		  print_float(val2);
		  printf("\n");
		  //write
		  printf("0x0000 -> 0x000f\n");
		  IOWR(WEB_FPU_0_BASE, 0x0000, 0x000f);
		  printf("0x0001 -> 0x00f0\n");
		  IOWR(WEB_FPU_0_BASE, 0x0001, 0x00f0);
		  printf("0x0002 -> 0x0f00\n");
		  IOWR(WEB_FPU_0_BASE, 0x0002, 0x0f00);

	    } else {
	    	printf("COMANDO INVALIDO\n");
	    	buf[0] = '\0';
	    }

	    if (send(SocketFD, buf, sizeof(buf), 0) < 0) //exemplo de envio
	    {
	        perror("Send()");
	        exit(EXIT_FAILURE);
	    }else{
	    	printf("Msg enviada: %s\n", buf);
	    }
	    msleep(1000);
  }
}

/* Main creates a single task, SSSInitialTask, and starts task scheduler.
 */

int main (int argc, char* argv[], char* envp[])
{
  
  INT8U error_code;

  DM9000A_INSTANCE( DM9000A_0, dm9000a_0 );
  DM9000A_INIT( DM9000A_0, dm9000a_0 );

  /* Clear the RTOS timer */
  OSTimeSet(0);

  /* SSSInitialTask will initialize the NicheStack
   * TCP/IP Stack and then initialize the rest of the Simple Socket Server example
   * RTOS structures and tasks.
   */
  error_code = OSTaskCreateExt(SSSInitialTask,
                             NULL,
                             (void *)&SSSInitialTaskStk[TASK_STACKSIZE],
                             SSS_INITIAL_TASK_PRIORITY,
                             SSS_INITIAL_TASK_PRIORITY,
                             SSSInitialTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
  alt_uCOSIIErrorHandler(error_code, 0);

  /*
   * As with all MicroC/OS-II designs, once the initial thread(s) and
   * associated RTOS resources are declared, we start the RTOS. That's it!
   */
  OSStart();
  
  while(1); /* Correct Program Flow never gets here. */

  return -1;
}

/******************************************************************************
*                                                                             *
* License Agreement                                                           *
*                                                                             *
* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *
* All rights reserved.                                                        *
*                                                                             *
* Permission is hereby granted, free of charge, to any person obtaining a     *
* copy of this software and associated documentation files (the "Software"),  *
* to deal in the Software without restriction, including without limitation   *
* the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
* and/or sell copies of the Software, and to permit persons to whom the       *
* Software is furnished to do so, subject to the following conditions:        *
*                                                                             *
* The above copyright notice and this permission notice shall be included in  *
* all copies or substantial portions of the Software.                         *
*                                                                             *
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  *
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    *
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
* DEALINGS IN THE SOFTWARE.                                                   *
*                                                                             *
* This agreement shall be governed in all respects by the laws of the State   *
* of California and by the laws of the United States of America.              *
* Altera does not recommend, suggest or require that this reference design    *
* file be used in conjunction or combination with any other product.          *
******************************************************************************/
